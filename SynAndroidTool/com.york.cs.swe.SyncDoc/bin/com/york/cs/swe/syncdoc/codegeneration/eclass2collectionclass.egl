[%
import "javautil.eol";
import "ecoreutil.eol";
%]
package [%=c.ePackage.name%];

import java.util.Iterator;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryEnumerator;
import com.couchbase.lite.QueryRow;
import com.york.cs.couchbaseapi.DBCollection;
import com.york.cs.couchbaseapi.DBCursorIterator;
import com.york.cs.couchbaseapi.ClassDBFactory;

public class [%=c.name%]Collection extends DBCollection<[%=c.getJavaName()%]> {
	protected static final String DOC_TYPE = [%=c.name%].class.getCanonicalName();
	
	public [%=c.name%]Collection(Database dbCollection) {
		super(dbCollection);
		[*
		[%for (a in c.eAttributes.select(a|a.isAnnotatedAs("searchable"))) { %]
		createIndex("[%=a.name%]");
		[%}%]
		*]
	}
	
	[*
	public Iterable<[%=c.getJavaName()%]> findById(String id) {
		return new IteratorIterable<[%=c.getJavaName()%]>(new PongoCursorIterator<[%=c.getJavaName()%]>(this, dbCollection.find(new BasicDBObject("_id", id))));
	}
	*]
	[*
	[*searchables*
	[%for (a in c.eAllAttributes.select(a|a.isAnnotatedAs("searchable"))) { %]
	public Iterable<[%=c.getJavaName()%]> findBy[%=a.name.ftuc()%]([%=a.eType.getJavaName()%] q) {
		return new IteratorIterable<[%=c.getJavaName()%]>(new PongoCursorIterator<[%=c.name%]>(this, dbCollection.find(new BasicDBObject("[%=a.name%]", q + ""))));
	}
	
	public [%=c.getJavaName()%] findOneBy[%=a.name.ftuc()%]([%=a.eType.getJavaName()%] q) {
		[%=c.getJavaName()%] [%=c.name.ftlc()%] = ([%=c.getJavaName()%]) PongoFactory.getInstance().createPongo(dbCollection.findOne(new BasicDBObject("[%=a.name%]", q + "")));
		if ([%=c.name.ftlc()%] != null) {
			[%=c.name.ftlc()%].setPongoCollection(this);
		}
		return [%=c.name.ftlc()%];
	}
	
	[*subclasses*
	[%for (subC in EClass.all.select(sc | sc.eSuperTypes.includes(c))) {%]
	
	public Iterable<[%=c.getJavaName()%]> find[%=subC.name%]sBy[%=a.name.ftuc()%]([%=a.eType.getJavaName()%] q) {
		return new IteratorIterable<[%=c.getJavaName()%]>(new PongoCursorIterator<[%=c.name%]>(this, dbCollection.find(new BasicDBObject("[%=a.name%]", q + "").append("_type", "[%=subC.ePackage.name%].[%=subC.name%]"))));
	}
	
	public [%=c.getJavaName()%] findOne[%=subC.name%]By[%=a.name.ftuc()%]([%=a.eType.getJavaName()%] q) {
		[%=c.getJavaName()%] [%=c.name.ftlc()%] = ([%=c.getJavaName()%]) PongoFactory.getInstance().createPongo(dbCollection.findOne(new BasicDBObject("[%=a.name%]", q + "").append("_type", "[%=subC.ePackage.name%].[%=subC.name%]")));
		if ([%=c.name.ftlc()%] != null) {
			[%=c.name.ftlc()%].setPongoCollection(this);
		}
		return [%=c.name.ftlc()%];
	}
	
	[%}%]

	public long countBy[%=a.name.ftuc()%]([%=a.eType.getJavaName()%] q) {
		return dbCollection.count(new BasicDBObject("[%=a.name%]", q + ""));
	}
	[%}%]
	
	*]
	
	@Override
	public Iterator<[%=c.getJavaName()%]> iterator() {
		
		Query query = getDBCollectionQuery(dbCollection); // TODO DEPENDENCIA
		QueryEnumerator result;
		try {
			result = query.run();
			Iterator<QueryRow> it = result;
			return new DBCursorIterator<[%=c.getJavaName()%]>(this, result);
		} catch (CouchbaseLiteException e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	public void add([%=c.getJavaName()%] [%=c.name.ftlc()%]) {
		super.add([%=c.name.ftlc()%]);
	}
	
	public void remove([%=c.getJavaName()%] [%=c.name.ftlc()%]) {
		super.remove([%=c.name.ftlc()%]);
	}
	
	@Override
	public String getName() {
		return DOC_TYPE;
	}
}